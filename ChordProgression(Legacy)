import java.io.IOException;
import java.util.Scanner;

public class ChordProgression {

    //representation of valid inputs
    final static String[] arrayMajors = { "C", "C#", "D", "Eb", "E", "F", "F#",
            "G", "Ab", "A", "Bb", "B" };

    //contains method for an array
    public static boolean contains(String[] array, String input) {
        boolean check = false;
        for (int i = 0; i < array.length && check == false; i++) {
            if (input.equals(array[i])) {
                check = true;
            }
        }
        return check;
    }

    //generation of chords in a particular key
    public static String[] chordsInKey(String key) {
        String[] returnString = new String[6];
        switch (key) {
            case "C": //"C Dm Em F G Am"
                returnString[0] = "C";
                returnString[1] = "Dm";
                returnString[2] = "Em";
                returnString[3] = "F";
                returnString[4] = "G";
                returnString[5] = "Am";
                break;
            case "C#": //"C# D#m E#m F# G# A#m"
                returnString[0] = "C#";
                returnString[1] = "D#m";
                returnString[2] = "E#m";
                returnString[3] = "F#";
                returnString[4] = "G#";
                returnString[5] = "A#m";
                break;
            case "D": //"D Em F#m G A Bm"
                returnString[0] = "D";
                returnString[1] = "Em";
                returnString[2] = "F#m";
                returnString[3] = "G";
                returnString[4] = "A";
                returnString[5] = "Bm";
                break;
            case "Eb": //"Eb Fm Gm Ab Bb Cm"
                returnString[0] = "Eb";
                returnString[1] = "Fm";
                returnString[2] = "Gm";
                returnString[3] = "Ab";
                returnString[4] = "Bb";
                returnString[5] = "Cm";
                break;
            case "E": //"E F#m G#m A B C#m"
                returnString[0] = "E";
                returnString[1] = "F#m";
                returnString[2] = "G#m";
                returnString[3] = "A";
                returnString[4] = "B";
                returnString[5] = "C#m";
                break;
            case "F": //"F Gm Am Bb C Dm"
                returnString[0] = "F";
                returnString[1] = "Gm";
                returnString[2] = "Am";
                returnString[3] = "Bb";
                returnString[4] = "C";
                returnString[5] = "Dm";
                break;
            case "F#": //"F# G#m A#m B C# D#m"
                returnString[0] = "F#";
                returnString[1] = "G#m";
                returnString[2] = "A#m";
                returnString[3] = "B";
                returnString[4] = "C#";
                returnString[5] = "D#m";
                break;
            case "G": //"G Am Bm C D Em"
                returnString[0] = "G";
                returnString[1] = "Am";
                returnString[2] = "Bm";
                returnString[3] = "C";
                returnString[4] = "D";
                returnString[5] = "Em";
                break;
            case "Ab": //"Ab Bbm Cm Db Eb Fm"
                returnString[0] = "Ab";
                returnString[1] = "Bbm";
                returnString[2] = "Cm";
                returnString[3] = "Db";
                returnString[4] = "Eb";
                returnString[5] = "Fm";
                break;
            case "A": //"A Bm C#m D E F#"
                returnString[0] = "A";
                returnString[1] = "Bm";
                returnString[2] = "C#m";
                returnString[3] = "D";
                returnString[4] = "E";
                returnString[5] = "F#";
                break;
            case "Bb": //"Bb Cm Dm Eb F Gm"
                returnString[0] = "Bb";
                returnString[1] = "Cm";
                returnString[2] = "Dm";
                returnString[3] = "Eb";
                returnString[4] = "F";
                returnString[5] = "Gm";
                break;
            case "B": //"B C#m D#m E F# G#m"
                returnString[0] = "B";
                returnString[1] = "C#m";
                returnString[2] = "D#m";
                returnString[3] = "E";
                returnString[4] = "F#";
                returnString[5] = "G#m";
                break;
            default:
                System.out.print("Something bad is about to happen.");
                break;

        }

        return returnString;
    }

    //returns a chorus
    public static String[] generateChorusOrVerse(String[] chordsInKey) {
        String[] chorus = new String[4];

        int[] elements = { 0, 0, 0, 0, 0, 0 };

        for (int i = 0; i < 4; i++) {

            int temp = (int) (Math.random() * chordsInKey.length);

            while (elements[temp] >= 2) {

                temp = (int) (Math.random() * chordsInKey.length);

            }

            chorus[i] = chordsInKey[temp];

            elements[temp]++;

        }

        return chorus;

    }

     public static String[] generateBridge(String[] chordsInChorus,
    String[] chords) {

        int temp = (int) (Math.random() * 6);

        String[] bridge= new String[3];

        int enterIndex = 0;
        int i = 0;
        while(enterIndex<2)
        {
            if (!contains(chordsInChorus, chords[i])) {

                bridge[enterIndex] = chords[i];

                enterIndex++;
            }
            i++;	
        }
        bridge[enterIndex++] = chords[temp];
        return bridge;
    }

    //prints the song to the console
    public static void printSong(String[] chorus, String[] verse,
            String[] verse2, String[] bridge) {
        //print chorus
        System.out.println("CHORUS: ");
        for (int i = 0; i < 4; i++) {
            System.out.print(chorus[i] + " ");
        }
        System.out.println("");
        //print first verse
        System.out.println("VERSE 1: ");
        for (int i = 0; i < 4; i++) {
            System.out.print(verse[i] + " ");
        }
        System.out.println("");
        //print chorus again
        System.out.println("CHORUS: ");
        for (int i = 0; i < 4; i++) {
            System.out.print(chorus[i] + " ");
        }
        System.out.println("");
        //print second verse
        System.out.println("VERSE 2: ");
        for (int i = 0; i < 4; i++) {
            System.out.print(verse2[i] + " ");
        }
        System.out.println("");
        //print the bridge
        System.out.println("BRIDGE: ");
        for (int i = 0; i < 3; i++) {
            System.out.print(bridge[i] + " ");
        }
        System.out.println("");
        //print the chorus for the last time
        //print chorus again
        System.out.println("CHORUS: ");
        for (int i = 0; i < 4; i++) {
            System.out.print(chorus[i] + " ");
        }

    }

    //prints the song to a file/method

    public static void main(String[] args) throws IOException {

        //Read in the value that will check the key of the song
        Scanner in = new Scanner(System.in);

        System.out.print("Enter a valid key that the output song will be in: ");
        String key = in.nextLine();
        if (!contains(arrayMajors, key)) {
            while (!contains(arrayMajors, key)) {
                System.out.print(
                        "NOPE! Enter a valid key that the output song will be in: ");
                key = in.nextLine();
            }
        }

        //switch case that constructs a smaller string of notes for the corresponding
        //notes (1st through 7th)
        String[] chords = chordsInKey(key);

        //construct the chorus given the array from above
        String[] chorus = generateChorusOrVerse(chords);
        //generate 3 different verses using the chorus
        String[] verse = generateChorusOrVerse(chorus);
        String[] verse2 = generateChorusOrVerse(chorus);
        //generate a bridge using a rendition of the verse
        String[] bridge = generateBridge(chorus, chords);
        //printing method using a rendition of parsing
        printSong(chorus, verse, verse2, bridge);

        in.close();

    }

}
